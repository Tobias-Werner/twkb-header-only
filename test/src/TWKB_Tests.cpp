//
// Created by Tobias Werner
//
// TWKB target bytes are generated by PostgreSQL/Postgis

#define CATCH_CONFIG_MAIN

#include <stdio.h>
#include <iostream>
#include <catch.hpp>
#include "TWKB.h"

using namespace TWKB;
using namespace std;


TEST_CASE("Binary encoding") {

    SECTION("Varint encoding") {

        vector<unsigned int> testValues({0, 300, 12434, 324345345});

        for (auto &testValue : testValues) {
            bytes_t bytes = Geometry::encodeVarint(testValue);
            CHECK(Geometry::decodeVarint(bytes) == testValue);
        }

    }

    SECTION("ZigZag encoding") {
        vector<int> testValues({0, 300, -300, 2545645, -2545645});

        for (auto &testValue : testValues) {
            unsigned int encoded = Geometry::encodeZigZag(testValue);
            CHECK(Geometry::decodeZigZag(encoded) == testValue);
        }
    }


}


TEST_CASE("Parsing geometries") {

    SECTION("Point") {

        Point point(7.615752, 53.932254, 6);
        bytes_t target = bytes_t({0xC1, 0x00, 0x90, 0xD4, 0xA1, 0x07, 0xBC, 0xC3, 0xB7, 0x33});

        for (size_t i = 0; i < point.getBytes().size(); i++) {
            cout << hex << point.getBytes()[i] << " <-> " << target[i] << endl;
            CHECK(point.getBytes()[i] == target[i]);
        }


    }

    SECTION("Line") {
        // TODO
    }

    SECTION("Polygon") {
        // TODO
    }

}

TEST_CASE("Parsing binaries") {

    SECTION("Point") {
        // TODO
    }

    SECTION("Line") {
        // TODO
    }

    SECTION("Polygon") {
        // TODO
    }

}